import { Controller, Get, Post, Body, Param, Delete, Put, Query } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiParam, ApiQuery } from '@nestjs/swagger';
import { <%= classify(name) %>Service } from './<%= dasherize(name) %>.service';
import { Create<%= classify(name) %>Dto } from './dto/create-<%= dasherize(name) %>.dto';
import { Update<%= classify(name) %>Dto } from './dto/update-<%= dasherize(name) %>.dto';

@ApiTags('<%= classify(name) %>')
@Controller('<%= dasherize(name) %>')
export class <%= classify(name) %>Controller {
  constructor(private readonly <%= camelize(name) %>Service: <%= classify(name) %>Service) {}

  @Post()
  @ApiOperation({
    summary: 'Create a new <%= dasherize(name) %>',
    description: 'Creates a new <%= dasherize(name) %> record in the system'
  })
  @ApiResponse({
    status: 201,
    description: 'The <%= dasherize(name) %> has been successfully created.',
    type: Create<%= classify(name) %>Dto
  })
  @ApiResponse({
    status: 400,
    description: 'Bad request - Invalid input data'
  })
  create(@Body() create<%= classify(name) %>Dto: Create<%= classify(name) %>Dto) {
    return this.<%= camelize(name) %>Service.create(create<%= classify(name) %>Dto);
  }

  @Get()
  @ApiOperation({
    summary: 'Get all <%= dasherize(name) %>s',
    description: 'Retrieves a list of all <%= dasherize(name) %> records'
  })
  @ApiQuery({
    name: 'page',
    required: false,
    description: 'Page number for pagination',
    type: Number
  })
  @ApiQuery({
    name: 'limit',
    required: false,
    description: 'Number of items per page',
    type: Number
  })
  @ApiResponse({
    status: 200,
    description: 'Successfully retrieved all <%= dasherize(name) %>s.'
  })
  findAll(@Query('page') page?: number, @Query('limit') limit?: number) {
    return this.<%= camelize(name) %>Service.findAll(page, limit);
  }

  @Get(':id')
  @ApiOperation({
    summary: 'Get a <%= dasherize(name) %> by id',
    description: 'Retrieves a specific <%= dasherize(name) %> by its unique identifier'
  })
  @ApiParam({
    name: 'id',
    description: 'The unique identifier of the <%= dasherize(name) %>',
    type: String
  })
  @ApiResponse({
    status: 200,
    description: 'Successfully retrieved the <%= dasherize(name) %>.'
  })
  @ApiResponse({
    status: 404,
    description: '<%= classify(name) %> not found'
  })
  findOne(@Param('id') id: string) {
    return this.<%= camelize(name) %>Service.findOne(+id);
  }

  @Put(':id')
  @ApiOperation({
    summary: 'Update a <%= dasherize(name) %>',
    description: 'Updates an existing <%= dasherize(name) %> record'
  })
  @ApiParam({
    name: 'id',
    description: 'The unique identifier of the <%= dasherize(name) %> to update',
    type: String
  })
  @ApiResponse({
    status: 200,
    description: 'The <%= dasherize(name) %> has been successfully updated.'
  })
  @ApiResponse({
    status: 404,
    description: '<%= classify(name) %> not found'
  })
  update(@Param('id') id: string, @Body() update<%= classify(name) %>Dto: Update<%= classify(name) %>Dto) {
    return this.<%= camelize(name) %>Service.update(+id, update<%= classify(name) %>Dto);
  }

  @Delete(':id')
  @ApiOperation({
    summary: 'Delete a <%= dasherize(name) %>',
    description: 'Removes a <%= dasherize(name) %> record from the system'
  })
  @ApiParam({
    name: 'id',
    description: 'The unique identifier of the <%= dasherize(name) %> to delete',
    type: String
  })
  @ApiResponse({
    status: 200,
    description: 'The <%= dasherize(name) %> has been successfully deleted.'
  })
  @ApiResponse({
    status: 404,
    description: '<%= classify(name) %> not found'
  })
  remove(@Param('id') id: string) {
    return this.<%= camelize(name) %>Service.remove(+id);
  }
}